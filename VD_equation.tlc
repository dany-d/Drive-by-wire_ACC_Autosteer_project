%% File : VD_equation.tlc
%% Created : Fri Apr 05 11:33:24 2019
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "VD_equation.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  VD_equation "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void VD_equation_Start_wrapper(const real_T *L1, const int_T p_width0,
			const real_T *L2, const int_T p_width1,
			const real_T *m, const int_T p_width2);

    extern void VD_equation_Outputs_wrapper(const real32_T *delta,
			const real32_T *u,
			const real32_T *psi,
			real32_T *x_dot,
			real32_T *y_dot,
			real32_T *psi_dot,
			const real_T *L1, const int_T p_width0,
			const real_T *L2, const int_T p_width1,
			const real_T *m, const int_T p_width2);

    extern void VD_equation_Terminate_wrapper(const real_T *L1, const int_T p_width0,
			const real_T *L2, const int_T p_width1,
			const real_T *m, const int_T p_width2);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  VD_equation_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>);
  %%
%endfunction


%% [EOF] VD_equation.tlc

